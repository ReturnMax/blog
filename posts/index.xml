<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 晨钟暮鼓</title>
    <link>https://guorou.github.io/posts/</link>
    <description>Recent content in Posts on 晨钟暮鼓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 12 Feb 2020 19:48:57 +0800</lastBuildDate>
    
	<atom:link href="https://guorou.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ali Cloud Server</title>
      <link>https://guorou.github.io/2020/02/ali-cloud-server/</link>
      <pubDate>Wed, 12 Feb 2020 19:48:57 +0800</pubDate>
      
      <guid>https://guorou.github.io/2020/02/ali-cloud-server/</guid>
      <description>&lt;h2 id=&#34;阿里云ecs服务器配置&#34;&gt;阿里云ECS服务器配置&lt;/h2&gt;
&lt;p&gt;趁着过年期间阿里云的新客活动，忍痛购买了3年的ECS云服务器，顺便可以给自己的域名挂上良民证，奥利给！&lt;/p&gt;
&lt;p&gt;但是由于今年疫情的原因，备案时间会比较长，据说需要20天左右。而且之前一直只是在用Linux Client，于是趁着备案期间先熟悉一下阿里云Linux Server的使用和设置，下面是一些零零散散的~踩坑~学习记录。&lt;/p&gt;
&lt;h3 id=&#34;密码&#34;&gt;密码&lt;/h3&gt;
&lt;p&gt;管理密码是一件非常头疼的事情，每次设置完密码都会陷入沉思，&amp;ldquo;woc&amp;hellip;马什么梅?&amp;quot;。&lt;br&gt;
ECS实例创建后主要使用的有两个密码，分别是实例密码和远程连接密码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例密码&lt;br&gt;
实例密码是Linux操作系统的密码，就是Root用户密码。奇怪的是创建实例时没有任何初始密码的提示，我是在创建完成后在服务控制台进行的密码重置，需要注意的是重置密码需要重启实例后才会生效。&lt;/li&gt;
&lt;li&gt;远程连接密码&lt;br&gt;
远程连接密码是指阿里云控制台自带的远程连接工具的密码，这个密码最初是系统自动生成的6位数字，用户可以自定义修改这个远程连接密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，如果我们不使用阿里云控制台自带的VNC远程连接工具，那么就用不到远程连接密码。更改远程连接密码无需重启直接生效；实例密码是Linux系统下的root密码，Windows系统下的administrator密码，修改实例密码必须重启实例才可以生效。&lt;/p&gt;
&lt;h2 id=&#34;网络&#34;&gt;网络&lt;/h2&gt;
&lt;p&gt;阿里云面向客户提供的网络类型服务有经典网络和专有网络两种，官方文档给的解释是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经典网络&lt;br&gt;
IP地址由阿里云统一分配，配置简便，使用方便，适合对操作易用性要求比较高、需要快速使用 ECS 的用户。&lt;/li&gt;
&lt;li&gt;专有网络&lt;br&gt;
是指逻辑隔离的私有网络，您可以自定义网络拓扑和 IP 地址，支持通过专线连接。适合于熟悉网络管理的用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你懂了吧？~喂，认真点！~&lt;br&gt;
我们通俗点的理解就是，从公网IP来看，经典网络和专有网络没有区别。从内网IP来看，经典网络是DHIP，也就是系统自动分配局域网IP地址，而专有网络则是手动分配局域网IP地址，方便有多台云服务器的用户自行定义内网IP结构。所以，如果我们只有一台服务器，或者有多台服务器但不需要进行内网互联，那么这两种网络任选一个就可以了。&lt;/p&gt;
&lt;p&gt;经典网络初始化了很多参数，适合快速入门ECS的用户；专有网络适合精通网络管理的用户，定制型可扩展型更强，是逻辑隔离的私有网络支持用户自定义网络拓扑和ip地址。&lt;/p&gt;
&lt;h2 id=&#34;带宽&#34;&gt;带宽&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入网带宽（上行带宽）&lt;br&gt;
流入云服务器ECS的带宽，例如：
&lt;ul&gt;
&lt;li&gt;云服务器ECS下载外部网络资源&lt;/li&gt;
&lt;li&gt;FTP客户端上传资源到云服务器ECS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出网带宽（下行带宽）&lt;br&gt;
流出云服务器ECS的带宽，例如：
&lt;ul&gt;
&lt;li&gt;云服务器ECS对外提供访问&lt;/li&gt;
&lt;li&gt;FTP客户端下载云服务器ECS内部资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安全组&#34;&gt;安全组&lt;/h2&gt;
&lt;p&gt;安全组是ECS实例的虚拟防火墙，用于设置实例的网络访问控制，允许或拒绝公网请求和内网请求。&lt;br&gt;
安全组具备状态检测和数据包过滤功能，可以设置单台或多台云服务器的网络访问控制。&lt;br&gt;
每个实例必须属于至少一个安全组，一个安全组可以包括多个实例。同一安全组内的实例之间默认内网互通，不同安全组的实例之间默认内网不通，可以授权两个安全组之间互访。&lt;br&gt;
在创建实例时，系统会提供一个默认安全组，默认安全组中的默认规则仅设置针对ICMP协议、SSH 22端口、RDP 3389端口、HTTP 80端口和HTTPS 443端口的入方向规则。&lt;br&gt;
我们也可以自行创建一个安全组并添加能满足自己业务需求的安全组规则，自行创建的安全组在未添加任何安全组规则之前，出方向允许所有访问，入方向拒绝所有访问。&lt;/p&gt;
&lt;h3 id=&#34;添加安全组规则&#34;&gt;添加安全组规则&lt;/h3&gt;
&lt;p&gt;一般场景下我们需要设置的选项主要有两个：端口范围和授权对象，其他可参考默认设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口范围&lt;br&gt;
端口取值范围从1到65535，设置格式例如1/200或者80/80，其中“-1/-1”不能单独设置，代表不限制端口。&lt;/li&gt;
&lt;li&gt;授权对象&lt;br&gt;
可以填写单个IP地址，例如223.78.253.196/32，填写0.0.0.0/0表示允许/拒绝全网段访问指定端口。&lt;br&gt;
可以填写多个IP地址，彼此之间用逗号隔开。&lt;br&gt;
此外还可以指定IP地址段，如 223.78.253.196/31，这将会授权/拒绝223.78.253.196和223.78.253.197的连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;规则优先级&#34;&gt;规则优先级&lt;/h3&gt;
&lt;p&gt;同类型规则间依赖优先级（手动建立1-100，系统建立110）决定最终执行的规则。当ECS实例加入了多个安全组时，多个安全组会从高到低依次匹配规则。优先级取值范围如下所示，数值越小，优先级越高。&lt;/p&gt;
&lt;h3 id=&#34;实践建议&#34;&gt;实践建议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;仅允许少量请求访问ECS实例时，可以将安全组作为白名单使用。即先设置安全组为拒绝全部访问，然后逐一添加允许通信的访问请求策略。&lt;/li&gt;
&lt;li&gt;选择开放具体的端口，如80/80端口，不要设置为端口范围。&lt;/li&gt;
&lt;li&gt;添加安全组规则时，谨慎授权0.0.0.0/0（全网段）访问源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例&#34;&gt;案例&lt;/h3&gt;
&lt;p&gt;如果您在实例上架设了一个网站，希望您的用户能通过HTTPS服务访问到您的网站，您需要在实例所在安全组中添加以下安全组规则。&lt;/p&gt;
&lt;p&gt;|网络类型|网卡类型|规则方向|授权策略|协议类型|端口范围|授权类型|授权对象|优先级|&lt;br&gt;
|:-:|:-:|:-:|:-:|:-:|:-:|:-:||:-:|&lt;br&gt;
|VPC|不需要配置|入方向|允许|HTTPS|443|地址段访问|0.0.0.0/0|1|&lt;br&gt;
|经典网络|公网|入方向|允许|HTTPS|443|地址段访问|0.0.0.0/0|1|&lt;/p&gt;
&lt;h2 id=&#34;ssh连接实例&#34;&gt;SSH连接实例&lt;/h2&gt;
&lt;p&gt;SSH是Secure Shell的缩写，目的是在积极之间建立安全连接，对传输内容进行加密，以达到安全的远程访问、操作以及数据传输。&lt;br&gt;
SSH不是本文介绍的重点，详细请&lt;a href=&#34;daibuchong&#34;&gt;戳&lt;/a&gt;，这里主要介绍阿里云的SSH配置。&lt;br&gt;
首先，我们需要在安全组中开放入方向的22端口（默认已经开启），确认开启之后我们可以通过用户名密码验证和SSH密钥对验证两种方式远程连接服务器实例。&lt;br&gt;
密码验证的设置比较简单，在此不再赘述。&lt;br&gt;
密钥对证相对更加安全，而且阿里云的SSH密钥设置也非常简便，直接在控制台中即可完成。&lt;br&gt;
首先我们在 &lt;code&gt;云服务控制台 &amp;gt; 网络与安全 &amp;gt; 密钥对&lt;/code&gt; 中创建密钥对并绑定实例，该密钥由ECS生成，默认采用RSA 2048位的加密方式。密钥生成后会提示我们把私钥保存到本地，然后便可通过XShell等工具连接实例了。&lt;br&gt;
使用SSH密钥需要注意两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用SSH密钥对登录Linux实例，将会禁用密码登录，以提高安全性。&lt;br&gt;
如果在绑定密钥对之后想使用密码方式登录实例，可以通过重置实例密码实现。如果在绑定密钥对之后重置了实例密码，使用密钥对方式和使用密码方式均能登录实例。&lt;/li&gt;
&lt;li&gt;基于数据安全考虑，在实例状态为运行中（Running）时绑定或者解绑密钥对，您需要重启实例使操作生效。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo Concise Tutorial2</title>
      <link>https://guorou.github.io/2020/02/hugo-concise-tutorial2/</link>
      <pubDate>Tue, 04 Feb 2020 17:46:40 +0800</pubDate>
      
      <guid>https://guorou.github.io/2020/02/hugo-concise-tutorial2/</guid>
      <description>&lt;p&gt;在上篇文章中，我们介绍了如何使用预创建的主题快速生成自己的静态网页并利用Github免费托管。&lt;/p&gt;
&lt;p&gt;但是使用预创建的主题怎么能满足我们的需求，作为一个geek我们要的是随心所欲为所欲为！&lt;/p&gt;
&lt;p&gt;接下来的教程就让我们从零开始，学习如何撸出一款高度定制化的Hugo主题吧！&lt;/p&gt;
&lt;h2 id=&#34;content-management&#34;&gt;Content Management&lt;/h2&gt;
&lt;h3 id=&#34;basic-concepts&#34;&gt;Basic Concepts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Content&lt;br&gt;
内容就是我们自己以markdown格式撰写的文章，通常我们把单独的文章放到content目录下，将同一类型的文章放到content的子目录下。&lt;br&gt;
文章可以通过命令行，如&lt;code&gt;hugo new about.md&lt;/code&gt;生成，也可以手动创建后放入content目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template&lt;br&gt;
模板保存在两个地方，分别为&lt;code&gt;site/layouts&lt;/code&gt;目录中和&lt;code&gt;site/themes/themename/layouts&lt;/code&gt;目录中，其中前者的优先级高于后者，当前者为空时才去寻找后一个目录下的设置。&lt;br&gt;
模板主要分为以下几种，分别为基础模板（），单页模板（），列表模板（），局部模板（），首页模板以及404页面模板。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static Page&lt;br&gt;
Static Page = Content + Template&lt;br&gt;
页面是通过&lt;code&gt;hugo&lt;/code&gt;命令生成的静态网站中的html页面。Hugo会根据文章的kind属性和固定的规则去找到相应的模板，然后根据模板生成最终的html页面。&lt;br&gt;
最终我们自己创建的文章和Hugo自动创建的文件的路径会转换成对应的网站的url，文章、页面和url的对应关系为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;└── content
    ├── _index.md          // [home]            &amp;lt;- https://example.com/**
    ├── about.md           // [page]            &amp;lt;- https://example.com/about/
    ├── posts               
    |   ├── _index.md      // [section]         &amp;lt;- https://example.com/posts/**         
    |   ├── firstpost.md   // [page]            &amp;lt;- https://example.com/posts/firstpost/
    |   ├── happy           
    |   |   ├── _index.md  // [section]         &amp;lt;- https://example.com/posts/happy/**
    |   |   └── ness.md    // [page]            &amp;lt;- https://example.com/posts/happy/ness/
    |   └── secondpost.md  // [page]            &amp;lt;- https://example.com/posts/secondpost/
    └── quote   
        ├── _index.md      // [section]         &amp;lt;- https://example.com/quote/**           
        ├── first.md       // [page]            &amp;lt;- https://example.com/quote/first/
        └── second.md      // [page]            &amp;lt;- https://example.com/quote/second/
// hugo默认生成的页面, 没有对应的markdown文章
分类列表页面               // [taxonomyTerm]    &amp;lt;- https://example.com/categories/**
某个分类下的所有文章的列表  // [taxonomy]        &amp;lt;- https://example.com/categories/one-category **
标签列表页面               // [taxonomyTerm]    &amp;lt;- https://example.com/tags/**
某个标签下的所有文章的列表  // [taxonomy]        &amp;lt;- https://example.com/tags/one-tag **
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;small&gt;注意：_index.md不是必须的, 如果没有找到_index.md，hugo会使用一些默认值。&lt;/small&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
页面总体分为两种，分别为&lt;code&gt;单页(signle page)&lt;/code&gt;和&lt;code&gt;列表页(list page)&lt;/code&gt;，根据&lt;code&gt;[]&lt;/code&gt;中标注的页面&lt;code&gt;属性(kind)&lt;/code&gt;，&lt;code&gt;single&lt;/code&gt;包括&lt;code&gt;page&lt;/code&gt;，&lt;code&gt;list&lt;/code&gt;包括&lt;code&gt;home&lt;/code&gt;, &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;taxonomyTerm&lt;/code&gt;和&lt;code&gt;taxonomy&lt;/code&gt;。其中，单页为用户撰写的文章，列表为Hugo自动创建的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LoveIt模板：&lt;br&gt;
_default/&lt;br&gt;
home page - baseof.html + summary.html&lt;br&gt;
posts - baseof.html + section.html&lt;br&gt;
post - baseof.html + patrial/&lt;br&gt;
about - baseof.html + single.html&lt;/p&gt;
&lt;p&gt;posts/&lt;br&gt;
single.html&lt;/p&gt;
&lt;p&gt;在编写模板的时候，一般会先编写一个基础模板。然后将一些常用的公用模板，如导航栏、页首、页脚等，做成单独的子模板，在需要的时候将这些子模板导入基础模板。&lt;br&gt;
Hugo默认的基础模板页是&lt;code&gt;_default/baseof.html&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo简明教程</title>
      <link>https://guorou.github.io/2020/02/hugo-concise-tutorial/</link>
      <pubDate>Mon, 03 Feb 2020 17:23:08 +0800</pubDate>
      
      <guid>https://guorou.github.io/2020/02/hugo-concise-tutorial/</guid>
      <description>&lt;p&gt;Hugo是由GO语言实现的静态网站生成器，自称“The world&amp;rsquo;s fastest framework for building websites”。&lt;/p&gt;
&lt;p&gt;静态网站的好处是快速、安全和易于部署，最主要的是可以利用版本控制系统来进行管理。&lt;br&gt;
本文介绍了如何使用Hugo快速搭建个人网站以及如何利用免费的github pages进行发布。&lt;/p&gt;
&lt;h2 id=&#34;step-1-install-hugo-for-win&#34;&gt;Step 1: Install Hugo for Win&lt;/h2&gt;
&lt;p&gt;在release&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; target=&#34;_blank&#34;&gt;&lt;u&gt;下载&lt;/u&gt;&lt;/a&gt; 对应版本的二进制文件，二进制版本的好处是无需安装额外依赖。下载完成后解压获得hugo.exe文件，然后将其所在路径添加到环境变量PATH中，方便在命令行中使用。&lt;/p&gt;
&lt;p&gt;添加成功后，在cmd中输入&lt;code&gt;hugo version&lt;/code&gt;检查是否安装成功，如果安装成功会输出&lt;br&gt;
&lt;code&gt;Hugo Static Site Generator v0.63.2-934EE21F windows/amd64 BuildDate: 2020-01-27T12:14:15Z&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们也可以通过执行&lt;code&gt;hugo -help&lt;/code&gt;查看命令帮助。&lt;/p&gt;
&lt;h2 id=&#34;step-2-create-a-new-site&#34;&gt;Step 2: Create a New Site&lt;/h2&gt;
&lt;p&gt;创建一个新的hugo站点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new site path/to/site
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该命令会在site目录下创建一个新的hugo站点，文件目录结构如下：&lt;br&gt;
site/ &lt;br&gt;
├─ archetypes&lt;br&gt;
│  └─ default.md&lt;br&gt;
├─ config.toml &lt;br&gt;
├─ content&lt;br&gt;
├─ data&lt;br&gt;
├─ layouts&lt;br&gt;
├─ static&lt;br&gt;
└─ themes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.toml&lt;br&gt;
站点的全局参数配置文件&lt;/li&gt;
&lt;li&gt;archetypes&lt;br&gt;
存放default.md文件，该文件定义了Hugo的markdown文件&lt;code&gt;前置数据(Front Matter)&lt;/code&gt;的结构，可以理解为markdown的metadata。我们可以自定义该结构文件，然后在config.toml中指定自定义的结构文件。Front Matter支持三种格式，分别为yaml，toml和json。默认生成的default.md文件为yaml格式，至少包括以下3项：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;--- &lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ replace .Name &amp;#34;&lt;/span&gt;-&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; | title }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.Date&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}}&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;draft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;--- &lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;  &lt;code&gt;draft&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;表示该文章处于草稿状态，不会被渲染和显示，发布时需要改为&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;content&lt;br&gt;
存放网页内容的目录，我们编写的markdown文件都存放在该目录中，是Hugo的默认源目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data&lt;br&gt;
data目录用来存放数据文件，一般是json文件，Hugo提供了相关命令可以从data目录下读取相关的文件数据，然后渲染到HTML页面中，将业务数据与模板分离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;layouts&lt;br&gt;
存放自定义的模板文件，Hugo优先使用layouts目录下的模板，未发现再去themes目录下查找。模板是以&lt;code&gt;.html&lt;/code&gt;文件指明如何将内容视图渲染为静态页面。&lt;br&gt;
模板包括列表页面、主页、分类模板、partals、单页模板等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static&lt;br&gt;
存放所有的静态内容，如images, css、js、CNAME等。Hugo在渲染时，会将static目录下的文件直接复制到public目录下，不会做任何渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;themes&lt;br&gt;
存放网站主题，可以下载多个主题，themes目录下的每个子目录代表了一个主题。可以通过在config.toml中通过参数theme指定主题，即theme目录下的子目录名字，也可以在执行hugo命令渲染时通过增加flag参数–theme=xx指定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-add-a-theme&#34;&gt;Step 3: Add a Theme&lt;/h2&gt;
&lt;p&gt;Hugo允许我们创建自己的主题或者使用预创建的开源主题。使用预创建的主题可以为我们节约大量的时间，避免关注不必要的技术细节而专注于内容的输出。让我们使用预创建的主题快速开始吧！&lt;/p&gt;
&lt;p&gt;首先我们挑选一个喜欢的 &lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34;&gt;&lt;u&gt;hugo主题&lt;/u&gt;&lt;/a&gt; ，例如 &lt;a href=&#34;https://themes.gohugo.io/loveit/&#34; target=&#34;_blank&#34;&gt;&lt;u&gt;LoveIt&lt;/u&gt;&lt;/a&gt;，然后将主题下载到themes目录下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; path/to/site
git init
git clone https://github.com/xx/xx.git themes/LoveIt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行成功后，会在themesm目录下生成主题目录LoveIt。&lt;br&gt;
添加主题到配置文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;theme = &amp;#34;LoveIt&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或直接用文本编辑器打开config.toml修改相应的配置。&lt;/p&gt;
&lt;p&gt;一个快速简便的配置方法是用&lt;code&gt;themes/loveit/exampleSite&lt;/code&gt;下的&lt;code&gt;config.toml&lt;/code&gt;替换&lt;code&gt;/site&lt;/code&gt;站点目录下默认生成的&lt;code&gt;config.tmol&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;step-4-add-some-content&#34;&gt;Step 4: Add Some Content&lt;/h2&gt;
&lt;p&gt;我们可以手动创建内容文件（content files），然后添加metadata，如title和data等。也可以通过下面的命令自动创建草稿：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在&lt;code&gt;content/posts&lt;/code&gt;目录中会生成一篇名为&lt;code&gt;my-first-post.md&lt;/code&gt;的文章草稿，并自动添加&lt;code&gt;archetypes/default.md&lt;/code&gt;中的内容。&lt;/p&gt;
&lt;h2 id=&#34;step-5-hosting-hugo-site-locally&#34;&gt;Step 5: Hosting Hugo Site Locally&lt;/h2&gt;
&lt;p&gt;在站点目录下执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;启动服务器后，可以通过&lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;http://localhost:1313/&lt;/a&gt;访问站点并调试。Hugo支持所谓的LiveReload，相应配置及内容的修改会即刻生效并在浏览器中加载。&lt;/p&gt;
&lt;h2 id=&#34;step-6-build-static-pages&#34;&gt;Step 6: Build Static Pages&lt;/h2&gt;
&lt;p&gt;在创建静态页面之前，我们需要对&lt;code&gt;config.toml&lt;/code&gt;进行配置。因为我们准备将该网页托管到github pages上，需要将baseURL修改为&amp;quot;https://yourgithubusername.github.io/&amp;quot;。&lt;br&gt;
调试无误后，我们在站点目录下执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该命令会在站点目录下新建一个public子目录，然后将渲染后的全部站点文件输出到该目录中。&lt;br&gt;
我们可以将public目录中的文件直接提交到github上以Githbu Pages方式发布，也可以部署到自己的服务器上。&lt;/p&gt;
&lt;h2 id=&#34;step-7-hosting-on-github-pages&#34;&gt;Step 7: Hosting on Github Pages&lt;/h2&gt;
&lt;p&gt;我们在github中新建一个repo，命名为&lt;code&gt;yourgithubusername.github.io&lt;/code&gt;，然后将public中的文件push到该仓库中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; path/to/site/public
git init
git remote add origin https://github.com/yourgithubusername/yourgithubusername.github.io
git add.
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;your message&amp;#34;&lt;/span&gt;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;叮！ 通过&lt;u&gt;&lt;a href=&#34;http://yourgitubusername.github.io&#34;&gt;http://yourgitubusername.github.io&lt;/a&gt;&lt;/u&gt; 访问你的网站吧。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://s0gohugo0io.icopy.site/documentation/&#34; target=&#34;_blank&#34;&gt;Hugo Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>