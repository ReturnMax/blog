<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SSH on 晨钟暮鼓</title>
    <link>https://belldrum.com/tags/ssh/</link>
    <description>Recent content in SSH on 晨钟暮鼓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 28 Feb 2020 00:25:28 +0800</lastBuildDate>
    
	<atom:link href="https://belldrum.com/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSH之原理&amp;实践</title>
      <link>https://belldrum.com/2020/02/0009-ssh-intro2/</link>
      <pubDate>Fri, 28 Feb 2020 00:25:28 +0800</pubDate>
      
      <guid>https://belldrum.com/2020/02/0009-ssh-intro2/</guid>
      <description>&lt;p&gt;OpenSSH是SSH协议的一个免费开源实现，是用于使用SSH协议进行远程登录的主要连接工具。它对所有流量进行加密，以消除窃听、连接劫持等攻击。此外，OpenSSH还提供了一整套安全的隧道功能、多种身份验证方法以及复杂的配置选项。&lt;/p&gt;
&lt;p&gt;OpenSSH软件主要包含以下几种工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端由SSH服务(sshd)、sftp-server和ssh-agent组成&lt;/li&gt;
&lt;li&gt;客户端使用ssh-keygen、ssh-add、ssh-kyesign、ssh-keyscan等管理密钥&lt;/li&gt;
&lt;li&gt;远程操作使用ssh、scp和sftp完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要介绍SSH的工作流程以及OpenSSH部分工具的使用。&lt;/p&gt;
&lt;h2 id=&#34;认证过程&#34;&gt;认证过程&lt;/h2&gt;
&lt;p&gt;SSH 协议使用对称加密(symmetric encryption)，非对称加密(asymmetric encryption)和哈希(hashing)来保证信息传输的安全。客户端和服务器端的SSH连接过程主要包括三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在客户端进行服务器验证&lt;/li&gt;
&lt;li&gt;生成会话密钥(session key)加密所有通信&lt;/li&gt;
&lt;li&gt;客户认证&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;服务器验证&#34;&gt;服务器验证&lt;/h3&gt;
&lt;p&gt;Ssh连接采用客户端-服务器模型(c/s)，客户端首先向服务器发送连接请求，服务器端运行的SSH服务(sshd)默认监听22端口并处理连接请求，这时客户端需要验证服务器的身份。服务器身份验证主要有两种情况：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 首次连接&lt;/strong&gt;&lt;br&gt;
如果客户端是第一次连接服务器，则要求客户端通过验证服务器的公钥来手动认证服务器。服务器的公钥一般保存在&lt;code&gt;/etc/ssh/host_key*&lt;/code&gt;，也可以使用ssh-keyscan命令找到。一旦服务器密钥被接受，那么将会被添加到客户端&lt;code&gt;~/.ssh/know_hosts&lt;/code&gt;文件中。&lt;code&gt; known_hosts&lt;/code&gt;文件包含有关客户端所有已验证服务器的信息。&lt;br&gt;
&lt;strong&gt;2. 再次连接&lt;/strong&gt;&lt;br&gt;
如果客户端不是第一次访问要连接的服务器，则将服务器的身份与&lt;code&gt;known_hosts&lt;/code&gt;文件中先前记录的信息进行匹配以进行验证。&lt;br&gt;
&lt;br /&gt;
服务器的身份需要用户手动进行验证，这样做的目的主要是为了防止中间人攻击(Man-in-the-middle attack, MITM)。&lt;/p&gt;
&lt;h3 id=&#34;生成会话密钥&#34;&gt;生成会话密钥&lt;/h3&gt;
&lt;p&gt;验证服务器后，服务器端和客户端使用&lt;code&gt;Diffie-Hellman&lt;/code&gt;算法生成会话密钥(session key)。 该算法的设计方式是，双方在会话密钥的生成中会做出同等贡献。 生成的会话密钥是在客户端和服务器端共享的对称密钥，即双方使用相同的密钥加密和解密。&lt;/p&gt;
&lt;h3 id=&#34;客户端认证&#34;&gt;客户端认证&lt;/h3&gt;
&lt;p&gt;最后阶段是使用SSH密钥对来验证客户端的身份。顾名思义，SSH密钥对由两个不同目的的密钥组成： 公钥用于加密数据并可以自由分发，私钥用于解密数据，并且永远不会与任何人共享。  对称加密建立后，将对客户端进行身份验证，验证过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端首先向服务器发送要验证的密钥对的ID。&lt;/li&gt;
&lt;li&gt;服务器检查客户端尝试登录的帐户的authorized_keys文件中的密钥ID。&lt;/li&gt;
&lt;li&gt;如果在文件中找到匹配该ID的公钥，那么服务器将生成一个随机数，然后使用客户端公钥对随机数进行加密并将加密的消息发送给客户端。&lt;/li&gt;
&lt;li&gt;如果客户端拥有正确的私钥，它将解密该消息以获得服务器生成的随机数。&lt;/li&gt;
&lt;li&gt;客户端将获得的随机数与共享的会话密钥结合在一起，并计算该值的MD5哈希值。&lt;/li&gt;
&lt;li&gt;然后，客户端将此MD5哈希发送回服务器，作为对加密号码消息的答复。&lt;/li&gt;
&lt;li&gt;服务器使用相同的共享会话密钥和发送给客户端的原始号码自行计算MD5值。它将自己的计算结果与客户端发回的计算结果进行比较。如果这两个值匹配，则证明该客户端拥有私钥，并且该客户端已通过身份验证。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不对称密钥允许服务器对客户端进行身份验证，因为客户端只有在拥有正确的关联私钥的情况下才能解密消息。&lt;br&gt;
此外，SSH支持多种身份验证机制，最常见的是&lt;strong&gt;密码认证&lt;/strong&gt;和&lt;strong&gt;公钥认证&lt;/strong&gt;。上文只说明了公钥认证过程，当公钥认证未通过时，会再进行密码认证，此处不再赘述。&lt;/p&gt;
&lt;h2 id=&#34;对称加密&#34;&gt;对称加密&lt;/h2&gt;
&lt;p&gt;我们在前文中介绍过，SSH 协议使用对称加密(symmetric encryption)，非对称加密(asymmetric encryption)和哈希(hashing)来保证信息传输的安全。&lt;br&gt;
大部分教程对非对称密钥的作用有详细的介绍，但在对称密钥介绍时往往语焉不详，造成很多人的误解。本节主要是希望大家了解一点，&lt;strong&gt;SSH使用对称密钥来加密整个连接，非对称密钥仅用于身份验证&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对称加密是一种加密类型，使用同一个密钥加密发给对方的消息、解密从另一方收到的消息。这意味着拥有密钥的任何人都可以加密和解密发送给拥有密钥的其他人的消息。这种加密模式通常称为“shared secret”加密或“secret key”加密。通常，只有一个密钥用于所有操作，或者只有一对密钥，它们之间的关系很容易发现，或者很容易根据一个密钥推导出另一个密钥。&lt;/p&gt;
&lt;p&gt;SSH使用对称密钥来加密整个连接。与一些人的假设相反，我们创建的公有/私有非对称密钥对仅用于身份验证，而不用于加密连接。对称加密甚至可以保护密码验证免遭监听。&lt;/p&gt;
&lt;p&gt;客户端和服务端为生成对称密钥做出了同等的贡献，并且最终生成的密钥永远不会为外界所知。这个密钥是通过密钥交换算法创建的，这种算法允许服务器和客户端共享某些公共数据，然后使用各自保留的秘密数据进行处理，最终两者独立地到达相同的目的：生成同一密钥。更详细地说明可参考这篇&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process&#34; target=&#34;_blank&#34;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;通过此过程创建的对称加密密钥是基于会话的(session-bassed)，并且构成了服务器与客户端之间发送的数据的实际加密。一旦建立，必须使用此共享密钥对其余数据进行加密。这个阶段完成之后，服务端和客户端的加密会话就被建立了，然后开始进行客户端的验证。&lt;/p&gt;
&lt;p&gt;SSH可以使用多种对称密码系统，包括AES，Blowfish，3DES，CAST128和Arcfour等。服务器和客户端都可以决定其支持的密码列表，按优先顺序排序。最终两者进行协商，客户端列表中的第一个在服务器上可用的选项将被用作两个方向上的加密算法。&lt;/p&gt;
&lt;h2 id=&#34;文件介绍&#34;&gt;文件介绍&lt;/h2&gt;
&lt;p&gt;SSH密钥验证过程涉及客户端和服务器端的多个文件，为了避免混淆，我们来总结一下各个文件的作用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务端：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;br&gt;
ssh服务程序(sshd)的配置文件&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etc/ssh/ssh_host_*&lt;/code&gt;&lt;br&gt;
ssh服务程序(sshd)启动时自动生成的服务端公钥和私钥文件，也可以通过&lt;code&gt;dpkg-reconfigure openssh-server&lt;/code&gt;命令重新生成。共有八个文件，包括四种加密类型：&lt;code&gt;rsa&lt;/code&gt;、&lt;code&gt;dsa&lt;/code&gt;、&lt;code&gt;ecdsa&lt;/code&gt;和&lt;code&gt;ed25519&lt;/code&gt;（实际使用时服务器会选择其中一种加密类型）。其中&lt;code&gt;.pub&lt;/code&gt;结尾的是公钥，将写入到客户端的&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;文件中，用于验证服务器身份。&lt;br&gt;
其中私钥文件严格要求权限为600，若不是则sshd服务可能会拒绝启动。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;br&gt;
保存的是基于公钥认证机制时客户端用户的公钥。在进行客户端认证时，服务端将读取对应用户目录下的&lt;code&gt;authorized_keys&lt;/code&gt;文件。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;客户端：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt;&lt;br&gt;
客户端的全局配置文件。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;br&gt;
客户端的用户配置文件，生效优先级高于全局配置文件。一般该文件默认不存在，可自行创建。该文件对权限有严格要求，只对所有者有读/写权限，对其他人完全拒绝写权限。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;&lt;br&gt;
保存服务器验证时服务端&lt;code&gt;host key&lt;/code&gt;的文件，文件内容来源于服务端的&lt;code&gt;ssh_host_*_key.pub&lt;/code&gt;文件。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/known_hosts&lt;/code&gt;&lt;br&gt;
全局&lt;code&gt;host key&lt;/code&gt;保存文件，作用等同于&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;&lt;br&gt;
客户端生成的私钥。由ssh-keygen生成。该文件严格要求权限，文件权限不得大于&lt;code&gt;711&lt;/code&gt;，一般设置为&lt;code&gt;600&lt;/code&gt;。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;&lt;br&gt;
私钥&lt;code&gt;id_rsa&lt;/code&gt;的配对公钥。对权限不敏感。当采用公钥认证机制时，该文件内容需要提前复制到服务端的&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;文件中。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.ssh/rc&lt;/code&gt;&lt;br&gt;
保存的是命令列表，这些命令在ssh连接到远程主机成功时将第一时间执行，执行完这些命令之后才开始登陆或执行ssh命令行中的命令。&lt;br&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/rc&lt;/code&gt;&lt;br&gt;
作用等同于&lt;code&gt;~/.ssh/rc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;
配置文件主要包括服务端配置文件&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;和客户端配置文件&lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt;。这两个文件中有很多同名的配置项，但前者是sshd启动时开关性的设置，后者是请求连接时客户端采取的配置。例如，两配置文件都有GSSAPIAuthentication项，在客户端将其设置为no，表示连接时将直接跳过该身份验证机制，而在服务端设置为no则表示sshd启动时不开启GSSAPI身份验证的机制。即使客户端使用了GSSAPI认证机制，只要服务端没有开启，就绝对不可能认证通过。&lt;/p&gt;
&lt;h2 id=&#34;认证实现&#34;&gt;认证实现&lt;/h2&gt;
&lt;p&gt;前文介绍了公钥认证的过程以及涉及到的文件，接下来主要介绍公钥认证的具体实现步骤。&lt;br&gt;
公钥认证过程主要包括两个步骤：1)生成密钥对和 2)分发公钥。&lt;/p&gt;
&lt;h3 id=&#34;生成密钥对&#34;&gt;生成密钥对&lt;/h3&gt;
&lt;p&gt;OpenSSH提供了密钥生成工具ssh-keygen。我们在客户端（服务端也行，无所谓在哪生成）执行&lt;code&gt;ssh-keygen&lt;/code&gt;指令会出现如下提示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -t rsa 	&lt;span class=&#34;c1&#34;&gt;#-t参数指定算法，通常使用rsa或dsa&lt;/span&gt;
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/root/.ssh/id_rsa&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:  &lt;span class=&#34;c1&#34;&gt;# 输入密钥对保存路径，与-f参数作用相同&lt;/span&gt;
Enter passphrase &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; no passphrase&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:               &lt;span class=&#34;c1&#34;&gt;# 输入私钥密码，可留空，与-P参数作用相同&lt;/span&gt;
Enter same passphrase again:            
Your identification has been saved in /root/.ssh/id_rsa. 
Your public key has been saved in /root/.ssh/id_rsa.pub. 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如不指定保存路径，那么生成的密钥对默认保存在&lt;code&gt;~/.ssh/&lt;/code&gt;目录下。其中，私钥的权限设置为&lt;code&gt;600&lt;/code&gt;，如果权限过大会导致公钥认证失败。&lt;/p&gt;
&lt;h3 id=&#34;分发公钥&#34;&gt;分发公钥&lt;/h3&gt;
&lt;p&gt;密钥生成后，我们要将公钥发送到远程服务器对应用户的家目录下，可以使用&lt;code&gt;ssh-copy-id&lt;/code&gt;命令实现，语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-copy-id &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-i &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;identity_file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;user@&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;host
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;-i 指定要分发的公钥文件&lt;/li&gt;
&lt;li&gt;user 指定对应的用户名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子，我们将公钥分发到服务器&lt;code&gt;114.55.93.224&lt;/code&gt;上的&lt;code&gt;gavin&lt;/code&gt;用户家目录下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-copy-id -i .ssh/id_rsa.pub gavin@114.55.93.224
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;而如果ssh服务端的端口不是22，还需要给&lt;code&gt;ssh-copy-id&lt;/code&gt;传递端口号，格式为&lt;code&gt;&amp;quot;-p port_num [user@]hostname&amp;quot;&lt;/code&gt;，如 &lt;code&gt;&amp;quot;-p 2222 gavin@114.55.93.224&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-copy-id&lt;/code&gt;命令的作用是在目标主机的指定用户的家目录下，检测是否有&lt;code&gt;~/.ssh&lt;/code&gt;目录，如果没有，则以700权限创建该目录，然后将本地的公钥追加到目标主机指定用户家目录下的&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;文件中。&lt;code&gt;authorized_keys&lt;/code&gt;文件可以保存多个公钥信息，每个公钥以换行分开。&lt;br&gt;
&lt;br /&gt;
因此，我们也可以直接将公钥文件传输到服务器上，然后手动将公钥追加到对应用户家目录下的&lt;code&gt;.ssh/authorized_keys&lt;/code&gt;文件中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat id_rsa &amp;gt;&amp;gt; authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;公钥分发完成后，我们就可以远程连接服务器了。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h2&gt;
&lt;h3 id=&#34;更改默认端口&#34;&gt;更改默认端口&lt;/h3&gt;
&lt;p&gt;Linux默认使用22端口进行远程登录，一些人专门用服务器扫描22端口并使用弱口令等进行暴力破解，通过更改22端口可以过滤掉大部分暴力破解的访问。&lt;br&gt;
&lt;ruby&gt;&lt;rb&gt;SSH服务&lt;/rb&gt;&lt;rt&gt;ssh daemon&lt;/rt&gt;&lt;/ruby&gt;是OpenSSH软件套件中运行在服务器端的守护进程，它的配置文件是&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，在配置文件中可以修改守护进程监听的端口。&lt;/p&gt;
&lt;p&gt;在修改之前我们先对配置文件进行备份，然后用文本编辑工具打开：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打开后可以看到如下内容：&lt;/p&gt;
&lt;pre&gt;
	#	$OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $

	# This is the sshd server system-wide configuration file.  See
	# sshd_config(5) for more information.

	# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

	# The strategy used for options in the default sshd_config shipped with
	# OpenSSH is to specify options with their default value where
	# possible, but leave them commented.  Uncommented options override the
	# default value.

	#Port 22
	#AddressFamily any
	#ListenAddress 0.0.0.0
	#ListenAddress ::
&lt;/pre&gt;
&lt;p&gt;其中22端口被注释掉了。&lt;br&gt;
为了防止后续端口修改错误导致无法登录，我们先删除&lt;code&gt;#&lt;/code&gt;保留&lt;code&gt;Port 22&lt;/code&gt;端口，然后另起一行添加&lt;code&gt;Port 2222&lt;/code&gt;，修改后的文件如下：&lt;/p&gt;
&lt;pre&gt;
	Port 22
	Port 2222
	#AddressFamily any
	#ListenAddress 0.0.0.0
	#ListenAddress ::
&lt;/pre&gt;
&lt;p&gt;修改完成后我们保存退出，重启sshd服务使配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;重启完成后，我们可以通过&lt;code&gt;netstat -ntl&lt;/code&gt;或&lt;code&gt;ss -ntl&lt;/code&gt;命令查看一下端口。&lt;/p&gt;
&lt;p&gt;配置完成后，记得在防火墙和安全组中放行&lt;code&gt;2222&lt;/code&gt;端口，然后用新端口重新登录。&lt;br&gt;
如果登录成功，测试正常后，我们就可以注释或删除掉之前保留的&lt;code&gt;22&lt;/code&gt;端口了。&lt;/p&gt;
&lt;h3 id=&#34;禁止root登录&#34;&gt;禁止root登录&lt;/h3&gt;
&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;文件：&lt;/p&gt;
&lt;pre&gt;
PermitRootLogin yes			# 是否允许root用户登录，默认为yes
&lt;/pre&gt;
&lt;h3 id=&#34;禁止口令登录&#34;&gt;禁止口令登录&lt;/h3&gt;
&lt;p&gt;修改&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;文件：&lt;/p&gt;
&lt;pre&gt;
PasswordAuthentication yes		# 是否使用密码验证，默认为yes，如果使用密钥对验证可以关闭
&lt;/pre&gt;
&lt;h3 id=&#34;待补充&#34;&gt;待补充&lt;/h3&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process&#34; target=&#34;_blank&#34;&gt;Understanding the SSH Encryption and Connection Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@Magical_Mudit/understanding-ssh-workflow-66a0e8d4bf65&#34; target=&#34;_blank&#34;&gt;Understanding SSH workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/f-ck-need-u/p/7129122.html&#34; target=&#34;_blank&#34;&gt;SSH命令和SSH服务详解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>