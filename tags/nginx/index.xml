<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nginx on 晨钟暮鼓</title>
    <link>http://belldrum.com/tags/nginx/</link>
    <description>Recent content in nginx on 晨钟暮鼓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 21 Feb 2020 23:25:34 +0800</lastBuildDate>
    
	<atom:link href="http://belldrum.com/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx之配置介绍</title>
      <link>http://belldrum.com/2020/02/0007-nginx/</link>
      <pubDate>Fri, 21 Feb 2020 23:25:34 +0800</pubDate>
      
      <guid>http://belldrum.com/2020/02/0007-nginx/</guid>
      <description>&lt;p&gt;Nginx是一款轻量级的web服务器，也可作为反向代理服务器，邮件服务器等。本文主要介绍如何使用Nginx部署静态网站。&lt;/p&gt;
&lt;p&gt;说到服务器(Server)，我们通常会想到两种概念：1)指硬件，也就是一台机器，有时也称之为「主机」，2)指软件程序，这种程序主要用来对外提供某些服务，比如邮件服务、数据库服务、网页服务等，它们24小时不间断的运行并监听某些固定的端口，等待客户端的连接请求并作出回应。&lt;/p&gt;
&lt;p&gt;本文要谈的Nginx就可以充当这种服务器，一个不间断运行的提供web服务的软件程序。&lt;/p&gt;
&lt;h2 id=&#34;软件安装&#34;&gt;软件安装&lt;/h2&gt;
&lt;p&gt;在Debian下可以使用&lt;code&gt;apt-get&lt;/code&gt;安装nginx：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;默认安装位置在&lt;code&gt;/etc/nginx&lt;/code&gt;。在Ubuntu 18.04系统中，nginx安装完成后会自动启动。&lt;br&gt;
&lt;br /&gt;
我们通过&lt;code&gt;ps -aux&lt;/code&gt;命令可以看到nginx的master进程和worker进程，分别由root用户和www-data用户启动。&lt;br&gt;
Master进程主要负责读取并验证配置文件nginx.conf，管理worker进程；Worker进程负责处理连接和请求，注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。&lt;/p&gt;
&lt;p&gt;如果nginx没有启动，我们可以执行&lt;code&gt;nginx&lt;/code&gt;命令手动启动。&lt;/p&gt;
&lt;p&gt;安装完成后，我们可以在浏览器输入服务器的公网IP，正常情况下可以看到nginx的默认欢迎页（确认防火墙已放行80端口）。&lt;br&gt;
接下来我们需要更改nginx的配置文件，使这个地址指向我们的网站首页而不是ngixn的默认网页。&lt;/p&gt;
&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;p&gt;默认情况下，nginx的配置文件是&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;。配置文件里大部分内容是注释掉的，文件内容如下：&lt;/p&gt;
&lt;pre&gt;
user www-data www-data;				//配置用户和用户组，用户组可以为空
worker_processes auto;				//允许生成的进程数，通常设置成和cpu数量相等
pid /run/nginx.pid;				//指定nginx进程运行文件存放地址
include /etc/nginx/modules-enabled/*.conf;
//引入modules-enabled目录下.conf配置文件，会跳转到nginx的默认欢迎页

events {					//events块，配置影响nginx服务器或与用户的网络连接
	worker_connections 768;			//设置最大连接数
	# multi_accept on;			//设置一个进程是否同时接受多个网络连接
}

http {						//http块，可以嵌套多个server
	...
	include /etc/nginx/conf.d/*.conf;	//引入conf.d目录下的.conf配置文件
	include /etc/nginx/sites-enabled/*;	//引入sites-enabled目录下的所有配置文件
	...
	server {				//server块，配置虚拟主机的参数
		listen 80;			//server监听端口
		server_name belldrum.com	//监听的主机ip地址或域名
		location {			//配置请求的路由和页面的处理

		}
	}

}
&lt;/pre&gt;
&lt;h2 id=&#34;部署网站&#34;&gt;部署网站&lt;/h2&gt;
&lt;p&gt;首先我们在服务器上建立一个保存网站的目录，假设为&lt;code&gt;/home/gavin/blog&lt;/code&gt;。
接下来我们对nginx的配置文件进行修改，主要是修改server块，修改后内容如下：&lt;/p&gt;
&lt;pre&gt;
http {
	server {
		listen 80;
		server_name belldrum.com;	// 域名或者主机ip
		root /home/gavin/blog;		// 网站资源根目录路，nginx需要有该目录的读取权限
		index index.html;		// 显示首页
		location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){
    	root /home/gavin/blog;
		}				// 访问网站的入口
	}
}
&lt;/pre&gt;
&lt;p&gt;修改完成后保存退出，执行&lt;code&gt;nginx -s reload&lt;/code&gt;重启nginx服务，便可以通过域名或ip地址访问自己的网站了。&lt;br&gt;
&lt;br /&gt;
其实在实践中，我们并不需要频繁的修改&lt;code&gt;nginx.conf&lt;/code&gt;文件，而是通过在该文件中使用&lt;code&gt;include&lt;/code&gt;指令引入额外的配置文件。一般情况下，&lt;code&gt;nginx.conf&lt;/code&gt;中已经通过&lt;code&gt;include&lt;/code&gt;指令引入了&lt;code&gt;conf.d&lt;/code&gt;、&lt;code&gt;sites-enable&lt;/code&gt;、&lt;code&gt;modules-enabled&lt;/code&gt;三个目录下的配置文件。我们可以在这些目录下新建配置文件，或者在任意目录下新建配置文件，然后在&lt;code&gt;nginx.conf&lt;/code&gt;的http块内用&lt;code&gt;include&lt;/code&gt;指令引入新建的配置文件。&lt;br&gt;
&lt;br /&gt;
举个例子：&lt;br&gt;
我们在conf.d目录下新建一个名为&lt;code&gt;belldrum.conf&lt;/code&gt;的配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /etc/nginx/conf.d
vim belldrum.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们在文件中写入以下内容，然后保存退出：&lt;/p&gt;
&lt;pre&gt;
server {
	listen 80;
	server_name belldrum.com;
	root /home/gavin/blog;
	index index.html;
	location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){
    root /home/gavin/blog;
	}
&lt;/pre&gt;  
&lt;p&gt;最后检查&lt;code&gt;nginx.conf&lt;/code&gt;的http块内是否已经正确引入这个配置文件：&lt;/p&gt;
&lt;pre&gt;
http {
	include /etc/nginx/conf.d/*.conf;
}
&lt;/pre&gt;
&lt;h2 id=&#34;配置ssl&#34;&gt;配置SSL&lt;/h2&gt;
&lt;p&gt;目前，没有配置ssl加密的网站已经被大多数浏览器标记为不安全，而且各大证书授权中心也相继推出了免费的SSL安全证书，因此给自己的网站添加一把小锁势在必行。&lt;br&gt;
&lt;br /&gt;
在这之前，我们需要先申请一份SSL安全证书，如果你使用的是阿里云，那么在控制中心可以申请到免费的SSL证书（这不是广告，阿里云，打钱！！）。如何申请证书不是本节重点，我们假设你已经拥有了一份有效的SSL安全证书，密钥和证书名称分别为&lt;code&gt;belldrum.com.key&lt;/code&gt;和&lt;code&gt;belldrum.com.pem&lt;/code&gt;。&lt;br&gt;
我们在&lt;code&gt;/etc/nginx&lt;/code&gt;目录下新建一个&lt;code&gt;cert&lt;/code&gt;文件夹用于存放密钥和证书，然后修改之前创建的&lt;code&gt;belldrum.conf&lt;/code&gt;配置文件，修改后的内容如下：&lt;/p&gt;
&lt;pre&gt;
server {
	listen 443 ssl;						//监听443端口
	server_name belldrum.com; 
	root /home/gavin/blog;
	index index.html;
	ssl_certificate /etc/nginx/cert/belldrum.com.pem;	//证书路径
	ssl_certificate_key /etc/nginx/cert/belldrum.com.key;	//私钥路径
	ssl_session_timeout 5m;					//会话过期时间
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){
		root /home/gavin/blog;
	}
}
&lt;/pre&gt;
&lt;p&gt;修改完成后保存退出，然后重启nginx服务即可通过&lt;code&gt;https://belldrum.com&lt;/code&gt;访问网站了。&lt;br&gt;
&lt;br /&gt;
此外也有一些工具，如Certbot，可以帮助我们自动申请和更新证书。&lt;/p&gt;
&lt;h2 id=&#34;设置跳转&#34;&gt;设置跳转&lt;/h2&gt;
&lt;p&gt;我们希望当用户访问&lt;code&gt;http://belldrum.com&lt;/code&gt;时能够自动跳转到&lt;code&gt;https://belldrum.com&lt;/code&gt;，或者更进一步，能够同时实现&lt;code&gt;http://www.belldrum.com&lt;/code&gt;和&lt;code&gt;https://www.belldrum.com&lt;/code&gt;到&lt;code&gt;https://belldrum.com&lt;/code&gt;的跳转。&lt;br&gt;
&lt;br /&gt;
我们可以使用&lt;code&gt;rewrite&lt;/code&gt;或者&lt;code&gt;301&lt;/code&gt;重定向实现这种跳转，在这里只介绍&lt;code&gt;301&lt;/code&gt;重定向的方法。&lt;br&gt;
我们将&lt;code&gt;belldrum.conf&lt;/code&gt;配置文件修改如下：&lt;/p&gt;
&lt;pre&gt;
server {
	listen 443 ssl;
	server_name belldrum.com; 
	root /home/gavin/blog;
	index index.html;
	ssl_certificate /etc/nginx/cert/belldrum.com.pem;
	ssl_certificate_key /etc/nginx/cert/belldrum.com.key;
	ssl_session_timeout 5m;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){
		root /home/gavin/blog;
	}
}

server {	//设置http跳转https
	listen 80;
	server_name belldrum.com;
	return 301 https://$server_name$request_uri;
}

server {	//设置www.belldrum.com跳转belldrum.com
        listen 80;
        listen 443 ssl;  
        server_name www.belldrum.com;

        ssl_certificate /etc/nginx/cert/belldrum.com.pem;
        ssl_certificate_key /etc/nginx/cert/belldrum.com.key;
        return 301 https://belldrum.com$request_uri;
}

&lt;/pre&gt;
&lt;p&gt;如果是多个域名的话，&lt;code&gt;server_name&lt;/code&gt;选项也支持正则表达式。修改完成后保存退出，然后重启nginx服务即可实现跳转。&lt;/p&gt;
&lt;h2 id=&#34;使用hsts&#34;&gt;使用HSTS&lt;/h2&gt;
&lt;h2 id=&#34;其他设置&#34;&gt;其他设置&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>